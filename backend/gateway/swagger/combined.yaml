openapi: 3.0.3
info:
  title: Gateway API
  version: 1.0.0
  description: API Specification
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
  - url: 'http://localhost:3000'
  - url: 'http://localhost:3001'
  - url: 'http://localhost:3002'
paths:
  /api/auth/register:
    post:
      summary: Register New Account
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fname:
                  type: string
                mname:
                  type: string
                lname:
                  type: string
                password:
                  type: string
                email:
                  type: string
                avata:
                  type: string
            example:
              fname: John
              mname: A.
              lname: Doe
              password: P@ssw0rd!
              email: john.doe@example.com
              avata: 'https://example.com/avatar.png'
      responses:
        '201':
          description: Register Successfully
          content:
            application/json:
              example:
                message: Register Successfully
                uid: 123
        '400':
          description: Validation Error
          content:
            application/json:
              example:
                error: Email already exists
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: Unexpected error occurred
  /api/auth/login:
    post:
      summary: Login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
            example:
              email: maianh12@example.com
              password: HLib@2025
      responses:
        '200':
          description: Login Successfully
          content:
            application/json:
              example:
                message: Login successfully
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        '400':
          description: Wrong Password or Email
          content:
            application/json:
              example:
                error: Invalid email or password
  /api/auth/otp/request:
    post:
      summary: Request OTP through email
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                email:
                  type: string
            example:
              uid: '123'
              email: john.doe@example.com
      responses:
        '200':
          description: OTP is sent successfully
          content:
            application/json:
              example:
                message: OTP has been sent to john.doe@example.com
        '400':
          description: Email missed
          content:
            application/json:
              example:
                error: Email is required
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
  /api/auth/otp/verify:
    post:
      summary: OTP Verification
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otpCode:
                  type: string
                uid:
                  type: string
                email:
                  type: string
            example:
              otpCode: '123456'
              uid: '123'
              email: john.doe@example.com
      responses:
        '200':
          description: Verify Successfully
          content:
            application/json:
              example:
                message: OTP verified successfully
        '400':
          description: Invalid OTP
          content:
            application/json:
              example:
                error: Invalid or expired OTP
        '404':
          description: User Not Found
          content:
            application/json:
              example:
                error: User not found
  /api/course/get-all-course:
    security:
      - bearerAuth: []
    get:
      summary: Get All Course
      tags:
        - Course
      parameters:
        - name: filter
          in: query
          required: false
          description: 'Compare [filter] with substring of [title, description]'
          schema:
            type: string
            default: ''
        - name: limit
          in: query
          required: false
          description: Maximum numbers of courses in each response
          schema:
            type: integer
            minimum: 0
            default: 4
        - name: offset
          in: query
          required: false
          description: Start index of course set
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: startDate
          in: query
          required: false
          description: Start updated time of course
          schema:
            type: string
            format: date
            example: '2025-08-15'
        - name: endDate
          in: query
          required: false
          description: End updated time of course
          schema:
            type: string
            format: date
            example: '2025-08-15'
        - name: sortPrice
          in: query
          required: false
          description: Sort ASC or DESC by price
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
      responses:
        '200':
          description: Access Successfully
        '500':
          description: Internal Server Error
  '/api/course/get-course/{course_id}':
    get:
      summary: Get Course Details By ID
      tags:
        - Course
      parameters:
        - name: course_id
          in: path
          required: true
          description: The unique ID of a course
          schema:
            type: string
      responses:
        '200':
          description: Get course successfully
        '500':
          description: Get course failed
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uid:
                      type: integer
                      example: 1
                    fname:
                      type: string
                      example: John
                    lname:
                      type: string
                      example: Doe
                    email:
                      type: string
                      example: john.doe@example.com
                    status:
                      type: string
                      example: active
                    role:
                      type: string
                      example: admin
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fname
                - lname
                - email
                - status
                - role
              properties:
                fname:
                  type: string
                  example: Jane
                lname:
                  type: string
                  example: Smith
                email:
                  type: string
                  example: jane.smith@example.com
                status:
                  type: string
                  example: active
                role:
                  type: string
                  example: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created
                  uid:
                    type: integer
        '400':
          description: Invalid input
